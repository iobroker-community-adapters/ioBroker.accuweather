{
  "version": 3,
  "sources": ["../../src/lib/accuapi.ts"],
  "sourcesContent": ["'use strict';\nimport axios from 'axios';\naxios.defaults.timeout = 10000;\n//const moment = require(\"moment\");\nimport queryString from 'qs';\n\n/**\n * Class representing the AccuWeather API.\n */\nexport class Accuapi {\n    apiKey: string;\n    lokey: string | number;\n    query: any;\n    time: string = '';\n    url: string = '';\n    /**\n     * Create an instance of Accuapi.\n     *\n     * @param apiKey - The API key for accessing AccuWeather.\n     */\n    constructor(apiKey: any) {\n        this.apiKey = apiKey;\n        this.lokey = 335315;\n        this.query = {};\n        //this.adapter = adapter;\n    }\n\n    /**\n     * Set the location key.\n     *\n     * @param lkey - The location key.\n     * @returns The instance of Accuapi.\n     */\n    localkey(lkey: string): Accuapi {\n        // Unique ID that can be used to search for a specific location.\n\n        !lkey ? null : (this.lokey = lkey);\n        return this;\n    }\n\n    /**\n     * Set the time interval.\n     *\n     * @param val - The time interval value.\n     * @returns Accuapi The instance of Accuapi.\n     */\n    timeInt(val = ''): Accuapi {\n        // Unique ID that can be used to search for a specific location.\n\n        !val ? (this.time = 'hourly/1hour') : (this.time = val);\n        return this;\n    }\n\n    /**\n     * Sets the language for the API request.\n     *\n     * @param lan - The language code in which to return the resource.\n     *                       Refer to http://apidev.accuweather.com/developers/languages for valid language codes.\n     *                       If not provided, the default value is 'en-us'.\n     * @returns The current instance of the API object to allow for method chaining.\n     */\n    language(lan: string): Accuapi {\n        // http://apidev.accuweather.com/developers/languages\n        // String indicating the language in which to return the resource.\n        // Default value set to en-us.\n\n        !lan ? null : (this.query.language = lan);\n        return this;\n    }\n\n    /**\n     * Set the details flag.\n     *\n     * @param bool - Specifies whether or not to include the full object.\n     * @returns The instance of Accuapi.\n     */\n    details(bool: boolean): Accuapi {\n        // Boolean value (true or false) specifies whether or not to include the full object.\n        // Default value set to false.\n        // (For location searches, details = true will return AccuWeather related details).\n\n        !bool ? null : (this.query.details = bool);\n        return this;\n    }\n\n    /**\n     * Set the getphotos flag\n     *\n     * @param bool Specifies whether or not to include photos.\n     * @returns The instance of Accuapi.\n     */\n    getphotos(bool: boolean): Accuapi {\n        // Boolean value (true or false) specifies whether or not to include the photos.\n        // Default value set to false.\n\n        !bool ? null : (this.query.getphotos = bool);\n        return this;\n    }\n    /**\n     * Set the metric flag.\n     *\n     * @param bool - Specifies whether to return the data in metric units.\n     * @returns The instance of Accuapi.\n     */\n    metric(bool: boolean): Accuapi {\n        // Boolean value (true or false) that specifies to return the data in either metric (=true) or imperial units.\n\n        !bool ? null : (this.query.metric = bool);\n        return this;\n    }\n\n    /**\n     * Generates the request URL for the AccuWeather API.\n     *\n     * @param current - A boolean indicating whether to generate the URL for current conditions or forecasts.\n     *                            If true, the URL for current conditions is generated.\n     */\n    generateReqUrl(current = false): void {\n        if (current) {\n            this.url = `http://dataservice.accuweather.com/currentconditions/v1/${this.lokey}?apikey=${this.apiKey}`;\n        } else {\n            this.url = `http://dataservice.accuweather.com/forecasts/v1/${this.time}/${this.lokey}?apikey=${this.apiKey}`;\n        }\n        this.query ? (this.url += `&${queryString.stringify(this.query)}`) : this.url;\n    }\n\n    /**\n     * Retrieves the weather data from the AccuWeather API.\n     *\n     * @returns A promise that resolves to the weather data.\n     * @throws {Error} Throws an error if the forecast cannot be retrieved.\n     */\n    async get(): Promise<any> {\n        this.generateReqUrl();\n        try {\n            const response = await axios.get(this.url ? this.url : '');\n            return response.data;\n        } catch (error: any) {\n            throw new Error(\n                `Forecast cannot be retrieved. ERROR: ${(error.response && JSON.stringify(error.response.data)) || error.toString()}`,\n            );\n        }\n    }\n\n    /**\n     * Retrieves the current weather data from the AccuWeather API.\n     *\n     * @returns A promise that resolves to the current weather data.\n     * @throws {Error} Throws an error if the forecast cannot be retrieved.\n     */\n    async getCurrent(): Promise<any> {\n        //\n        //const body = require(\"./test-data/currentCond.json\");\n        //\n        this.generateReqUrl(true);\n        try {\n            const response = await axios.get(this.url ? this.url : '');\n            return response.data;\n        } catch (error: any) {\n            throw new Error(\n                `Forecast cannot be retrieved. ERROR: ${(error.response && JSON.stringify(error.response.data)) || error.toString()}`,\n            );\n        }\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,mBAAkB;AAGlB,gBAAwB;AAFxB,aAAAA,QAAM,SAAS,UAAU;AAOlB,MAAM,QAAQ;AAAA,EACjB;AAAA,EACA;AAAA,EACA;AAAA,EACA,OAAe;AAAA,EACf,MAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMd,YAAY,QAAa;AACrB,SAAK,SAAS;AACd,SAAK,QAAQ;AACb,SAAK,QAAQ,CAAC;AAAA,EAElB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,SAAS,MAAuB;AAG5B,KAAC,OAAO,OAAQ,KAAK,QAAQ;AAC7B,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,QAAQ,MAAM,IAAa;AAGvB,KAAC,MAAO,KAAK,OAAO,iBAAmB,KAAK,OAAO;AACnD,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,SAAS,KAAsB;AAK3B,KAAC,MAAM,OAAQ,KAAK,MAAM,WAAW;AACrC,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,QAAQ,MAAwB;AAK5B,KAAC,OAAO,OAAQ,KAAK,MAAM,UAAU;AACrC,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,UAAU,MAAwB;AAI9B,KAAC,OAAO,OAAQ,KAAK,MAAM,YAAY;AACvC,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,MAAwB;AAG3B,KAAC,OAAO,OAAQ,KAAK,MAAM,SAAS;AACpC,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,eAAe,UAAU,OAAa;AAClC,QAAI,SAAS;AACT,WAAK,MAAM,2DAA2D,KAAK,KAAK,WAAW,KAAK,MAAM;AAAA,IAC1G,OAAO;AACH,WAAK,MAAM,mDAAmD,KAAK,IAAI,IAAI,KAAK,KAAK,WAAW,KAAK,MAAM;AAAA,IAC/G;AACA,SAAK,QAAS,KAAK,OAAO,IAAI,UAAAC,QAAY,UAAU,KAAK,KAAK,CAAC,KAAM,KAAK;AAAA,EAC9E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,MAAoB;AACtB,SAAK,eAAe;AACpB,QAAI;AACA,YAAM,WAAW,MAAM,aAAAD,QAAM,IAAI,KAAK,MAAM,KAAK,MAAM,EAAE;AACzD,aAAO,SAAS;AAAA,IACpB,SAAS,OAAY;AACjB,YAAM,IAAI;AAAA,QACN,wCAAyC,MAAM,YAAY,KAAK,UAAU,MAAM,SAAS,IAAI,KAAM,MAAM,SAAS,CAAC;AAAA,MACvH;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,aAA2B;AAI7B,SAAK,eAAe,IAAI;AACxB,QAAI;AACA,YAAM,WAAW,MAAM,aAAAA,QAAM,IAAI,KAAK,MAAM,KAAK,MAAM,EAAE;AACzD,aAAO,SAAS;AAAA,IACpB,SAAS,OAAY;AACjB,YAAM,IAAI;AAAA,QACN,wCAAyC,MAAM,YAAY,KAAK,UAAU,MAAM,SAAS,IAAI,KAAM,MAAM,SAAS,CAAC;AAAA,MACvH;AAAA,IACJ;AAAA,EACJ;AACJ;",
  "names": ["axios", "queryString"]
}
